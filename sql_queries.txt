//Companies Posting More Jobs Than Average
SELECT c.id AS company_id,
       c.name AS company_name,
       COUNT(jp.id) AS total_jobs
FROM Company AS c
JOIN JobPosting AS jp 
    ON jp.company_id = c.id
GROUP BY c.id, c.name
HAVING COUNT(jp.id) > (
    SELECT AVG(company_job_count) 
    FROM (
       SELECT COUNT(*) AS company_job_count
       FROM JobPosting
       GROUP BY company_id
    ) AS SubCounts
);

//Job Postings in Yemen that are Temporary AND Belong to Companies Posting More than the Average Number of Jobs

SELECT jp.*
FROM JobPosting AS jp
JOIN Location AS loc 
       ON jp.location_id = loc.id
WHERE loc.country = 'Yemen'
  AND jp.work_type = 'Temporary'
  AND jp.company_id IN (
      SELECT c.id
      FROM Company AS c
      JOIN JobPosting AS jp2 
            ON jp2.company_id = c.id
      GROUP BY c.id
      HAVING COUNT(jp2.id) > (
          SELECT AVG(company_job_count)  
          FROM (
              SELECT COUNT(*) AS company_job_count
              FROM JobPosting
              GROUP BY company_id
          ) AS T
      )
  );

Job Postings from ZipRecruiter in the US, Where the Locationâ€™s ZipRecruiter Post Count Exceeds the Average ZipRecruiter Post Count

SELECT jp.*
FROM JobPosting AS jp
JOIN JobPortal AS portal
       ON jp.job_portal_id = portal.id
JOIN Location AS loc
       ON jp.location_id = loc.id
WHERE portal.name = 'ZipRecruiter'
  AND loc.country = 'United States'
  AND loc.id IN (
      SELECT jpx.location_id
      FROM JobPosting AS jpx
      WHERE jpx.job_portal_id = portal.id
      GROUP BY jpx.location_id
      HAVING COUNT(*) > (
         SELECT AVG(post_count)
         FROM (
            SELECT COUNT(*) AS post_count
            FROM JobPosting
            WHERE job_portal_id = portal.id
            GROUP BY location_id
         ) AS T
      )
  );

//Companies With No Recent Posts: 

SELECT c.id AS company_id,
       c.name AS company_name
FROM Company AS c
WHERE NOT EXISTS (
    SELECT 1
    FROM JobPosting AS jp
    WHERE jp.company_id = c.id
      AND jp.posting_date >= (CURRENT_DATE - INTERVAL '30 DAY') //this may error out

);

//Transaction(Deactivate Inactive companies and Delete Jobs)
START TRANSACTION;

UPDATE app_company
JOIN (
    SELECT c.id
    FROM app_company c
    LEFT JOIN app_jobposting jp ON c.id = jp.company_id
    WHERE jp.id IS NULL 
       OR jp.posting_date < DATE_SUB(CURDATE(), INTERVAL 6 MONTH)
) AS SubqueryTable
ON app_company.id = SubqueryTable.id
SET app_company.profile = 'Inactive';

DELETE FROM app_jobposting
WHERE company_id IN (
    SELECT id FROM app_company WHERE profile = 'Inactive'
);

COMMIT;

//Stored_procedure(GetActiveCompanyJobsAboveAverage)
DELIMITER //

CREATE PROCEDURE GetActiveCompanyJobsAboveAverage(IN comp_id INT)
BEGIN
    IF (
        SELECT COUNT(*) FROM app_jobposting WHERE company_id = comp_id
    ) > (
        SELECT AVG(job_count)
        FROM (
            SELECT COUNT(*) AS job_count
            FROM app_jobposting
            GROUP BY company_id
        ) AS SubqueryTable
    )
    THEN
        SELECT jp.id AS jobposting_id, jp.title, jp.posting_date
        FROM app_jobposting jp
        WHERE jp.company_id = comp_id;
    ELSE
        SELECT 'Company does not post more jobs than average' AS message;
    END IF;
END //

DELIMITER ;


//Trigger (Insert a New JobPosting)
DELIMITER //

CREATE TRIGGER UpdateCompanyTotalJobs
AFTER INSERT ON app_jobposting
FOR EACH ROW
BEGIN
    UPDATE app_company
    SET total_jobs = total_jobs + 1
    WHERE id = NEW.company_id;
END //

DELIMITER ;

